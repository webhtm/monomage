
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monomage</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: Heebo;
            margin: 0;
            background: linear-gradient(135deg, #1e1e1e, #2d2d2d);
            color: white;
            display: flex;
            flex-direction: row;
            height: 100vh;
            overflow: hidden;
        }

        #sidebar {
            width: 280px;
            background: linear-gradient(180deg, #2a2a2a, #1f1f1f);
            padding: 20px;
            display: flex;
            flex-direction: column;
            height: 100%;
            overflow-y: auto;
            border-right: 1px solid #444;
            box-shadow: 2px 0 10px rgba(0,0,0,0.3);
        }

        #image-container {
            flex-grow: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            overflow: hidden;
            background: radial-gradient(circle at center, #1a1a1a, #0f0f0f);
        }

        .logo {
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
            background: white;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        #image-input {
            width: 100%;
            padding: 12px;
            margin-bottom: 20px;
            background: #333;
            border: 2px dashed #666;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        #image-input:hover {
            border-color: #4CAF50;
            background: #3a3a3a;
        }

        .section {
            margin-bottom: 15px;
        }

        .section-title {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            width: 100%;
            padding: 12px;
            border: none;
            color: white;
            border-radius: 8px;
            margin-bottom: 10px;
            font-weight: 600;
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .section-content {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .controls-group {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 10px;
        }

        .controls-group button,
        .controls-group input,
        .controls-group select {
            background: linear-gradient(135deg, #404040, #303030);
            color: white;
            border: 1px solid #555;
            padding: 10px;
            cursor: pointer;
            font-family: inherit;
            flex: 1 1 calc(50% - 4px);
            border-radius: 6px;
            transition: all 0.2s ease;
            font-size: 12px;
        }

        .controls-group button:hover,
        .controls-group select:hover {
            background: linear-gradient(135deg, #505050, #404040);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        .controls-group button:active {
            transform: translateY(0);
        }

        .controls-group input[type="text"],
        .controls-group input[type="number"],
        .controls-group input[type="range"] {
            background: #2a2a2a;
        }

        .controls-group input:focus,
        .controls-group select:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
        }

        .controls-group label {
            display: flex;
            align-items: center;
            background: linear-gradient(135deg, #404040, #303030);
            color: white;
            border: 1px solid #555;
            padding: 10px;
            cursor: pointer;
            font-family: inherit;
            flex: 1 1 calc(50% - 4px);
            border-radius: 6px;
            transition: all 0.2s ease;
            font-size: 12px;
        }

        .controls-group label:hover {
            background: linear-gradient(135deg, #505050, #404040);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        .controls-group input[type="checkbox"] {
            margin-right: 5px;
        }

        .controls-group input[type="color"] {
            padding: 0;
            height: 40px;
            cursor: pointer;
            margin-left: 5px;
            border: none;
        }

        canvas {
            max-width: 100%;
            max-height: 100%;
            border: 2px solid #333;
            border-radius: 8px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.5);
            transition: all 0.3s ease;
        }

        canvas:hover {
            box-shadow: 0 12px 40px rgba(0,0,0,0.7);
        }

        #download-button {
            background: linear-gradient(135deg, #2196F3, #1976D2);
            color: white;
            font-family: inherit;
            padding: 15px 20px;
            border: none;
            cursor: pointer;
            border-radius: 8px;
            margin-top: 20px;
            width: 100%;
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        #download-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(33, 150, 243, 0.4);
        }

        .status-bar {
            padding: 10px;
            background: #1a1a1a;
            border-top: 1px solid #333;
            font-size: 12px;
            color: #ccc;
            text-align: center;
        }

        .undo-redo {
            display: flex;
            gap: 5px;
            margin-bottom: 15px;
        }

        .undo-redo button {
            flex: 1;
            padding: 8px;
            background: #444;
            border: 1px solid #555;
            color: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .undo-redo button:hover {
            background: #555;
        }

        .undo-redo button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Responsive Design */
        @media (max-width: 800px) {
            body {
                flex-direction: column;
            }

            #sidebar {
                width: 100%;
                height: auto;
                max-height: 40vh;
                order: 2;
            }

            #image-container {
                order: 1;
                height: 60vh;
            }

            .controls-group button,
            .controls-group input,
            .controls-group select,
            .controls-group label {
                flex: 1 1 calc(33.33% - 6px);
            }
        }

        @media (max-width: 600px) {
            .controls-group button,
            .controls-group input,
            .controls-group select,
            .controls-group label {
                flex: 1 1 calc(50% - 4px);
                font-size: 11px;
                padding: 8px;
            }
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <div class="logo">Monomage</div>
        
        <input type="file" id="image-input" accept="image/*" title="Select an image file">

        <div class="undo-redo">
            <button id="undo-btn" disabled>Undo</button>
            <button id="redo-btn" disabled>Redo</button>
            <button id="reset-btn">Reset</button>
        </div>

        <div class="section">
            <div class="section-title">Transform</div>
            <div class="section-content controls-group">
                <button id="rotate-left">Rotate Left</button>
                <button id="rotate-right">Rotate Right</button>
                <button id="flip-horizontal">Flip Horizontal</button>
                <button id="flip-vertical">Flip Vertical</button>
                <button id="crop">Crop 50%</button>
                <button id="crop-custom">Custom Crop</button>
                <input type="number" id="resize-width" placeholder="Width">
                <input type="number" id="resize-height" placeholder="Height">
                <button id="resize">Resize</button>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Effects</div>
            <div class="section-content controls-group">
                <button id="apply-grayscale">Grayscale</button>
                <button id="apply-sepia">Sepia</button>
                <button id="apply-invert">Invert</button>
                <button id="apply-blur">Blur</button>
                <button id="apply-sharpen">Sharpen</button>
                <button id="apply-edge">Edge Detect</button>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Adjustments</div>
            <div class="section-content">
                <div class="controls-group">
                    <button id="brightness-plus">Bright +</button>
                    <button id="brightness-minus">Bright -</button>
                    <button id="contrast-plus">Contrast +</button>
                    <button id="contrast-minus">Contrast -</button>
                    <button id="saturation-plus">Sat +</button>
                    <button id="saturation-minus">Sat -</button>
                </div>
                <div class="controls-group">
                    <input type="range" id="hue-slider" min="0" max="360" value="0" title="Hue">
                </div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Text</div>
            <div class="section-content">
                <div class="controls-group">
                    <input type="text" id="text-input" placeholder="Enter Text">
                    <select id="font-family">
                        <option value="Arial">Arial</option>
                        <option value="Times New Roman">Times New Roman</option>
                        <option value="Courier New">Courier New</option>
                        <option value="Verdana">Verdana</option>
                        <option value="Georgia">Georgia</option>
                    </select>
                    <input type="number" id="font-size" min="1" value="20">
                </div>
                <div class="controls-group">
                    <label for="bold"><input type="checkbox" id="bold"> Bold</label>
                    <label for="italic"><input type="checkbox" id="italic"> Italic</label>
                    <label for="font-color">Text Color <input type="color" id="font-color" value="#ffffff"></label>
                </div>
                <div class="controls-group">
                    <select id="text-align">
                        <option value="left">Left</option>
                        <option value="center" selected>Center</option>
                        <option value="right">Right</option>
                    </select>
                    <select id="text-baseline">
                        <option value="top">Top</option>
                        <option value="middle" selected>Middle</option>
                        <option value="bottom">Bottom</option>
                    </select>
                </div>
                <div class="controls-group">
                    <input type="number" id="text-x" placeholder="X">
                    <input type="number" id="text-y" placeholder="Y">
                    <button id="apply-text">Add Text</button>
                </div>
            </div>
        </div>

        <button id="download-button">Download Edited Image</button>
        
        <div class="status-bar" id="status-bar">
            Ready - Load an image to start editing
        </div>
    </div>

    <div id="image-container">
        <canvas id="canvas"></canvas>
    </div>

    <script>
        const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const statusBar = document.getElementById('status-bar');

let img = new Image();
let originalImageData = null;
let history = [];
let historyStep = -1;
let currentState = {
    brightness: 0,
    contrast: 0,
    saturation: 0,
    hue: 0
};
let currentText = null;
let baseImageData = null;
let isDragging = false;
let offsetX, offsetY;

// Save project to localStorage
function saveProjectToLocalStorage() {
    const projectData = {
        history: history,
        historyStep: historyStep,
        currentState: currentState,
        currentText: currentText,
        baseImageData: baseImageData ? Array.from(baseImageData.data) : null,
        canvasWidth: canvas.width,
        canvasHeight: canvas.height,
        originalImageData: originalImageData ? Array.from(originalImageData.data) : null
    };
    localStorage.setItem('monomageProject', JSON.stringify(projectData));
    updateStatus('Project saved to local storage');
}

// Load project from localStorage
function loadProjectFromLocalStorage() {
    const projectData = localStorage.getItem('monomageProject');
    if (projectData) {
        const parsedData = JSON.parse(projectData);
        
        history = parsedData.history || [];
        historyStep = parsedData.historyStep || -1;
        currentState = parsedData.currentState || { brightness: 0, contrast: 0, saturation: 0, hue: 0 };
        currentText = parsedData.currentText || null;
        
        if (parsedData.canvasWidth && parsedData.canvasHeight) {
            canvas.width = parsedData.canvasWidth;
            canvas.height = parsedData.canvasHeight;
        }

        if (parsedData.originalImageData) {
            originalImageData = new ImageData(
                new Uint8ClampedArray(parsedData.originalImageData),
                canvas.width,
                canvas.height
            );
        }

        if (parsedData.baseImageData) {
            baseImageData = new ImageData(
                new Uint8ClampedArray(parsedData.baseImageData),
                canvas.width,
                canvas.height
            );
        }

        if (history.length > 0) {
            const img = new Image();
            img.onload = function() {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                updateUndoRedoButtons();
                if (currentText && baseImageData) {
                    ctx.putImageData(baseImageData, 0, 0);
                    drawText();
                }
                updateStatus('Project loaded from local storage');
            };
            img.src = history[historyStep];
        }
    }
}

// Save state for undo/redo
function saveState() {
    historyStep++;
    if (historyStep < history.length) {
        history.length = historyStep;
    }
    history.push(canvas.toDataURL());
    updateUndoRedoButtons();
    saveProjectToLocalStorage(); // Save to localStorage after state change
}

function updateUndoRedoButtons() {
    document.getElementById('undo-btn').disabled = historyStep <= 0;
    document.getElementById('redo-btn').disabled = historyStep >= history.length - 1;
}

function updateStatus(message) {
    statusBar.textContent = message;
}

// File input handler
document.getElementById('image-input').addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            img.src = e.target.result;
            img.onload = function() {
                // Fit image to canvas while maintaining aspect ratio
                const maxWidth = 800;
                const maxHeight = 600;
                let { width, height } = img;
                
                if (width > maxWidth || height > maxHeight) {
                    const ratio = Math.min(maxWidth / width, maxHeight / height);
                    width *= ratio;
                    height *= ratio;
                }
                
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
                
                originalImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                history = [canvas.toDataURL()];
                historyStep = 0;
                updateUndoRedoButtons();
                updateStatus(`Image loaded: ${canvas.width}x${canvas.height}`);
                saveProjectToLocalStorage(); // Save new project to localStorage
            };
        };
        reader.readAsDataURL(file);
    }
});

// Undo/Redo/Reset functionality
document.getElementById('undo-btn').addEventListener('click', function() {
    if (historyStep > 0) {
        historyStep--;
        const img = new Image();
        img.onload = function() {
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            saveProjectToLocalStorage(); // Save after undo
        };
        img.src = history[historyStep];
        updateUndoRedoButtons();
        updateStatus('Undid last action');
        currentText = null; // Disable text editing after undo
    }
});

document.getElementById('redo-btn').addEventListener('click', function() {
    if (historyStep < history.length - 1) {
        historyStep++;
        const img = new Image();
        img.onload = function() {
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            saveProjectToLocalStorage(); // Save after redo
        };
        img.src = history[historyStep];
        updateUndoRedoButtons();
        updateStatus('Redid last action');
        currentText = null; // Disable text editing after redo
    }
});

document.getElementById('reset-btn').addEventListener('click', function() {
    if (originalImageData) {
        canvas.width = originalImageData.width;
        canvas.height = originalImageData.height;
        ctx.putImageData(originalImageData, 0, 0);
        saveState();
        currentState = { brightness: 0, contrast: 0, saturation: 0, hue: 0 };
        currentText = null;
        baseImageData = null;
        updateStatus('Reset to original image');
        saveProjectToLocalStorage(); // Save after reset
    }
});

// Transform functions
document.getElementById('rotate-left').addEventListener('click', function() {
    rotateImage(-90);
    saveState();
    updateStatus('Rotated left 90°');
    currentText = null; // Rasterize text on transform
});

document.getElementById('rotate-right').addEventListener('click', function() {
    rotateImage(90);
    saveState();
    updateStatus('Rotated right 90°');
    currentText = null; // Rasterize text on transform
});

document.getElementById('flip-horizontal').addEventListener('click', function() {
    flipImage(true, false);
    saveState();
    updateStatus('Flipped horizontally');
    currentText = null; // Rasterize text on transform
});

document.getElementById('flip-vertical').addEventListener('click', function() {
    flipImage(false, true);
    saveState();
    updateStatus('Flipped vertically');
    currentText = null; // Rasterize text on transform
});

document.getElementById('crop').addEventListener('click', function() {
    cropImage(0.5);
    saveState();
    updateStatus('Cropped to 50%');
    currentText = null; // Rasterize text on transform
});

document.getElementById('resize').addEventListener('click', function() {
    const newWidth = parseInt(document.getElementById('resize-width').value);
    const newHeight = parseInt(document.getElementById('resize-height').value);
    if (newWidth && newHeight) {
        resizeImage(newWidth, newHeight);
        saveState();
        updateStatus(`Resized to ${newWidth}x${newHeight}`);
        currentText = null; // Rasterize text on transform
    }
});

// Effect functions
document.getElementById('apply-grayscale').addEventListener('click', function() {
    applyFilter('grayscale');
    saveState();
    updateStatus('Applied grayscale effect');
    currentText = null; // Rasterize text on effect
});

document.getElementById('apply-sepia').addEventListener('click', function() {
    applyFilter('sepia');
    saveState();
    updateStatus('Applied sepia effect');
    currentText = null; // Rasterize text on effect
});

document.getElementById('apply-invert').addEventListener('click', function() {
    applyFilter('invert');
    saveState();
    updateStatus('Applied invert effect');
    currentText = null; // Rasterize text on effect
});

document.getElementById('apply-blur').addEventListener('click', function() {
    applyFilter('blur');
    saveState();
    updateStatus('Applied blur effect');
    currentText = null; // Rasterize text on effect
});

document.getElementById('apply-sharpen').addEventListener('click', function() {
    applyFilter('sharpen');
    saveState();
    updateStatus('Applied sharpen effect');
    currentText = null; // Rasterize text on effect
});

document.getElementById('apply-edge').addEventListener('click', function() {
    applyFilter('edge');
    saveState();
    updateStatus('Applied edge detection');
    currentText = null; // Rasterize text on effect
});

// Adjustment functions
document.getElementById('brightness-plus').addEventListener('click', function() {
    currentState.brightness += 10;
    applyAdjustment('brightness', 10);
    saveState();
    updateStatus(`Brightness: ${currentState.brightness}`);
    currentText = null; // Rasterize text on adjustment
});

document.getElementById('brightness-minus').addEventListener('click', function() {
    currentState.brightness -= 10;
    applyAdjustment('brightness', -10);
    saveState();
    updateStatus(`Brightness: ${currentState.brightness}`);
    currentText = null; // Rasterize text on adjustment
});

document.getElementById('contrast-plus').addEventListener('click', function() {
    currentState.contrast += 10;
    applyAdjustment('contrast', 10);
    saveState();
    updateStatus(`Contrast: ${currentState.contrast}`);
    currentText = null; // Rasterize text on adjustment
});

document.getElementById('contrast-minus').addEventListener('click', function() {
    currentState.contrast -= 10;
    applyAdjustment('contrast', -10);
    saveState();
    updateStatus(`Contrast: ${currentState.contrast}`);
    currentText = null; // Rasterize text on adjustment
});

document.getElementById('saturation-plus').addEventListener('click', function() {
    currentState.saturation += 10;
    applyAdjustment('saturation', 10);
    saveState();
    updateStatus(`Saturation: ${currentState.saturation}`);
    currentText = null; // Rasterize text on adjustment
});

document.getElementById('saturation-minus').addEventListener('click', function() {
    currentState.saturation -= 10;
    applyAdjustment('saturation', -10);
    saveState();
    updateStatus(`Saturation: ${currentState.saturation}`);
    currentText = null; // Rasterize text on adjustment
});

document.getElementById('hue-slider').addEventListener('input', function() {
    const hueValue = parseInt(this.value);
    applyHue(hueValue);
    currentText = null; // Rasterize text on adjustment
});

document.getElementById('hue-slider').addEventListener('change', function() {
    saveState();
    updateStatus(`Hue: ${this.value}°`);
});

document.getElementById('apply-text').addEventListener('click', function() {
    const textValue = document.getElementById('text-input').value;
    if (textValue !== '') {
        const fontFamily = document.getElementById('font-family').value || 'Arial';
        const fontSize = parseInt(document.getElementById('font-size').value) || 20;
        const weight = document.getElementById('bold').checked ? 'bold' : 'normal';
        const style = document.getElementById('italic').checked ? 'italic' : 'normal';
        const color = document.getElementById('font-color').value || '#ffffff';
        const align = document.getElementById('text-align').value || 'center';
        const baseline = document.getElementById('text-baseline').value || 'middle';
        const x = parseInt(document.getElementById('text-x').value) || canvas.width / 2;
        const y = parseInt(document.getElementById('text-y').value) || canvas.height / 2;

        if (currentText && baseImageData) {
            ctx.putImageData(baseImageData, 0, 0);
        }

        baseImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

        currentText = {
            text: textValue,
            x,
            y,
            fontFamily,
            fontSize,
            weight,
            style,
            color,
            align,
            baseline
        };

        drawText();
        saveState();
        updateStatus(`Added text: "${textValue}". Drag to move.`);
    }
});

function drawText() {
    if (!currentText) return;

    ctx.font = `${currentText.style} ${currentText.weight} ${currentText.fontSize}px ${currentText.fontFamily}`;
    ctx.textAlign = currentText.align;
    ctx.textBaseline = currentText.baseline;

    ctx.fillStyle = currentText.color;
    ctx.fillText(currentText.text, currentText.x, currentText.y);
}

// Drag text
canvas.addEventListener('mousedown', function(e) {
    if (!currentText) return;

    const rect = canvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;

    ctx.font = `${currentText.style} ${currentText.weight} ${currentText.fontSize}px ${currentText.fontFamily}`;
    ctx.textAlign = currentText.align;
    ctx.textBaseline = currentText.baseline;

    const metrics = ctx.measureText(currentText.text);
    const width = metrics.width;
    const height = currentText.fontSize * 1.2;

    let left = currentText.x;
    if (currentText.align === 'center') left -= width / 2;
    if (currentText.align === 'right') left -= width;

    let top = currentText.y;
    if (currentText.baseline === 'top') top = currentText.y;
    if (currentText.baseline === 'middle') top = currentText.y - height / 2;
    if (currentText.baseline === 'bottom') top = currentText.y - height;

    const right = left + width;
    const bottom = top + height;

    if (mouseX >= left && mouseX <= right && mouseY >= top && mouseY <= bottom) {
        isDragging = true;
        offsetX = mouseX - currentText.x;
        offsetY = mouseY - currentText.y;
        canvas.style.cursor = 'move';
    }
});

canvas.addEventListener('mousemove', function(e) {
    if (isDragging) {
        const rect = canvas.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;

        ctx.putImageData(baseImageData, 0, 0);
        currentText.x = mouseX - offsetX;
        currentText.y = mouseY - offsetY;
        drawText();
    }
});

document.addEventListener('mouseup', function() {
    if (isDragging) {
        isDragging = false;
        canvas.style.cursor = 'default';
        saveState();
        updateStatus('Text moved');
    }
});

// Implementation functions
function rotateImage(degrees) {
    const radians = degrees * Math.PI / 180;
    const cos = Math.abs(Math.cos(radians));
    const sin = Math.abs(Math.sin(radians));
    const newWidth = canvas.width * cos + canvas.height * sin;
    const newHeight = canvas.width * sin + canvas.height * cos;

    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = newWidth;
    tempCanvas.height = newHeight;
    const tempCtx = tempCanvas.getContext('2d');
    
    tempCtx.translate(newWidth / 2, newHeight / 2);
    tempCtx.rotate(radians);
    tempCtx.drawImage(canvas, -canvas.width / 2, -canvas.height / 2);

    canvas.width = newWidth;
    canvas.height = newHeight;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(tempCanvas, 0, 0);
}

function flipImage(horizontal, vertical) {
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = canvas.width;
    tempCanvas.height = canvas.height;
    const tempCtx = tempCanvas.getContext('2d');
    
    tempCtx.save();
    tempCtx.scale(horizontal ? -1 : 1, vertical ? -1 : 1);
    tempCtx.drawImage(canvas, horizontal ? -canvas.width : 0, vertical ? -canvas.height : 0);
    tempCtx.restore();

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(tempCanvas, 0, 0);
}

function cropImage(factor) {
    const newWidth = canvas.width * factor;
    const newHeight = canvas.height * factor;
    const x = (canvas.width - newWidth) / 2;
    const y = (canvas.height - newHeight) / 2;

    const imageData = ctx.getImageData(x, y, newWidth, newHeight);
    canvas.width = newWidth;
    canvas.height = newHeight;
    ctx.putImageData(imageData, 0, 0);
}

function resizeImage(newWidth, newHeight) {
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = newWidth;
    tempCanvas.height = newHeight;
    const tempCtx = tempCanvas.getContext('2d');
    
    tempCtx.drawImage(canvas, 0, 0, newWidth, newHeight);
    canvas.width = newWidth;
    canvas.height = newHeight;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(tempCanvas, 0, 0);
}

function applyFilter(effect) {
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const data = imageData.data;

    switch (effect) {
        case 'grayscale':
            for (let i = 0; i < data.length; i += 4) {
                const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
                data[i] = data[i + 1] = data[i + 2] = avg;
            }
            break;
        case 'sepia':
            for (let i = 0; i < data.length; i += 4) {
                const r = data[i], g = data[i + 1], b = data[i + 2];
                data[i] = Math.min(255, r * 0.393 + g * 0.769 + b * 0.189);
                data[i + 1] = Math.min(255, r * 0.349 + g * 0.686 + b * 0.168);
                data[i + 2] = Math.min(255, r * 0.272 + g * 0.534 + b * 0.131);
            }
            break;
        case 'invert':
            for (let i = 0; i < data.length; i += 4) {
                data[i] = 255 - data[i];
                data[i + 1] = 255 - data[i + 1];
                data[i + 2] = 255 - data[i + 2];
            }
            break;
        case 'blur':
            // Simple box blur
            const tempData = new Uint8ClampedArray(data);
            const width = canvas.width;
            for (let i = 0; i < data.length; i += 4) {
                const x = (i / 4) % width;
                const y = Math.floor((i / 4) / width);
                let r = 0, g = 0, b = 0, count = 0;
                
                for (let dy = -1; dy <= 1; dy++) {
                    for (let dx = -1; dx <= 1; dx++) {
                        const nx = x + dx;
                        const ny = y + dy;
                        if (nx >= 0 && nx < width && ny >= 0 && ny < canvas.height) {
                            const idx = (ny * width + nx) * 4;
                            r += tempData[idx];
                            g += tempData[idx + 1];
                            b += tempData[idx + 2];
                            count++;
                        }
                    }
                }
                data[i] = r / count;
                data[i + 1] = g / count;
                data[i + 2] = b / count;
            }
            break;
        case 'sharpen':
            // Sharpen filter
            const tempData2 = new Uint8ClampedArray(data);
            const width2 = canvas.width;
            const kernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];
            
            for (let i = 0; i < data.length; i += 4) {
                const x = (i / 4) % width2;
                const y = Math.floor((i / 4) / width2);
                let r = 0, g = 0, b = 0;
                
                for (let ky = -1; ky <= 1; ky++) {
                    for (let kx = -1; kx <= 1; kx++) {
                        const nx = x + kx;
                        const ny = y + ky;
                        if (nx >= 0 && nx < width2 && ny >= 0 && ny < canvas.height) {
                            const idx = (ny * width2 + nx) * 4;
                            const kernelIdx = (ky + 1) * 3 + (kx + 1);
                            r += tempData2[idx] * kernel[kernelIdx];
                            g += tempData2[idx + 1] * kernel[kernelIdx];
                            b += tempData2[idx + 2] * kernel[kernelIdx];
                        }
                    }
                }
                data[i] = Math.max(0, Math.min(255, r));
                data[i + 1] = Math.max(0, Math.min(255, g));
                data[i + 2] = Math.max(0, Math.min(255, b));
            }
            break;
        case 'edge':
            // Edge detection (Sobel)
            const tempData3 = new Uint8ClampedArray(data);
            const width3 = canvas.width;
            
            for (let i = 0; i < data.length; i += 4) {
                const x = (i / 4) % width3;
                const y = Math.floor((i / 4) / width3);
                
                let gx = 0, gy = 0;
                const sobelX = [-1, 0, 1, -2, 0, 2, -1, 0, 1];
                const sobelY = [-1, -2, -1, 0, 0, 0, 1, 2, 1];
                
                for (let ky = -1; ky <= 1; ky++) {
                    for (let kx = -1; kx <= 1; kx++) {
                        const nx = x + kx;
                        const ny = y + ky;
                        if (nx >= 0 && nx < width3 && ny >= 0 && ny < canvas.height) {
                            const idx = (ny * width3 + nx) * 4;
                            const kernelIdx = (ky + 1) * 3 + (kx + 1);
                            const gray = (tempData3[idx] + tempData3[idx + 1] + tempData3[idx + 2]) / 3;
                            gx += gray * sobelX[kernelIdx];
                            gy += gray * sobelY[kernelIdx];
                        }
                    }
                }
                
                const magnitude = Math.sqrt(gx * gx + gy * gy);
                data[i] = data[i + 1] = data[i + 2] = Math.min(255, magnitude);
            }
            break;
    }

    ctx.putImageData(imageData, 0, 0);
}

function applyAdjustment(type, value) {
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const data = imageData.data;

    switch (type) {
        case 'brightness':
            const adjustment = value * 2.55;
            for (let i = 0; i < data.length; i += 4) {
                data[i] = Math.max(0, Math.min(255, data[i] + adjustment));
                data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + adjustment));
                data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + adjustment));
            }
            break;
        case 'contrast':
            const factor = (255 + value) / (255 - value);
            for (let i = 0; i < data.length; i += 4) {
                data[i] = Math.max(0, Math.min(255, factor * (data[i] - 128) + 128));
                data[i + 1] = Math.max(0, Math.min(255, factor * (data[i + 1] - 128) + 128));
                data[i + 2] = Math.max(0, Math.min(255, factor * (data[i + 2] - 128) + 128));
            }
            break;
        case 'saturation':
            for (let i = 0; i < data.length; i += 4) {
                const r = data[i] / 255;
                const g = data[i + 1] / 255;
                const b = data[i + 2] / 255;
                
                const max = Math.max(r, g, b);
                const min = Math.min(r, g, b);
                const lightness = (max + min) / 2;
                
                if (max === min) continue; // grayscale
                
                const saturation = lightness > 0.5 ? (max - min) / (2 - max - min) : (max - min) / (max + min);
                const newSaturation = Math.max(0, Math.min(1, saturation + value / 100));
                
                const chroma = (1 - Math.abs(2 * lightness - 1)) * newSaturation;
                const x = chroma * (1 - Math.abs(((r - min) / (max - min) * 6) % 2 - 1));
                const m = lightness - chroma / 2;
                
                data[i] = Math.max(0, Math.min(255, (r + (chroma - (r - min) / (max - min) * chroma) + m) * 255));
                data[i + 1] = Math.max(0, Math.min(255, (g + (chroma - (g - min) / (max - min) * chroma) + m) * 255));
                data[i + 2] = Math.max(0, Math.min(255, (b + (chroma - (b - min) / (max - min) * chroma) + m) * 255));
            }
            break;
    }

    ctx.putImageData(imageData, 0, 0);
}

function applyHue(value) {
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const data = imageData.data;
    const adjustment = value / 360;

    for (let i = 0; i < data.length; i += 4) {
        const hsv = rgbToHsv(data[i], data[i + 1], data[i + 2]);
        hsv[0] = (hsv[0] + adjustment) % 1;
        if (hsv[0] < 0) hsv[0] += 1;
        const newRgb = hsvToRgb(hsv[0], hsv[1], hsv[2]);
        data[i] = newRgb[0];
        data[i + 1] = newRgb[1];
        data[i + 2] = newRgb[2];
    }

    ctx.putImageData(imageData, 0, 0);
}

function rgbToHsv(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;

    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h, s, v = max;

    const d = max - min;
    s = max === 0 ? 0 : d / max;

    if (max === min) {
        h = 0;
    } else {
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }

    return [h, s, v];
}

function hsvToRgb(h, s, v) {
    if (s === 0) {
        return [v * 255, v * 255, v * 255];
    }
    
    h *= 6;
    const i = Math.floor(h);
    const f = h - i;
    const p = v * (1 - s);
    const q = v * (1 - s * f);
    const t = v * (1 - s * (1 - f));
    
    switch (i % 6) {
        case 0: return [v * 255, t * 255, p * 255];
        case 1: return [q * 255, v * 255, p * 255];
        case 2: return [p * 255, v * 255, t * 255];
        case 3: return [p * 255, q * 255, v * 255];
        case 4: return [t * 255, p * 255, v * 255];
        case 5: return [v * 255, p * 255, q * 255];
    }
}

// Download functionality
document.getElementById('download-button').addEventListener('click', function() {
    const link = document.createElement('a');
    link.download = 'monomage-edited-image.png';
    link.href = canvas.toDataURL('image/png');
    link.click();
    updateStatus('Image downloaded successfully');
    localStorage.removeItem('monomageProject'); // Clear localStorage after download
});

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
    if (e.ctrlKey || e.metaKey) {
        switch (e.key.toLowerCase()) {
            case 'z':
                e.preventDefault();
                if (e.shiftKey) {
                    document.getElementById('redo-btn').click();
                } else {
                    document.getElementById('undo-btn').click();
                }
                break;
            case 'r':
                e.preventDefault();
                document.getElementById('reset-btn').click();
                break;
            case 's':
                e.preventDefault();
                document.getElementById('download-button').click();
                break;
        }
    }
});

// Initialize
loadProjectFromLocalStorage(); // Load project on page load
updateStatus('Enhanced Monomage loaded - Select an image to begin editing');
    </script>
</body>
</html>
